# Comprehensive Guide to Kubernetes Monitoring Stack

This guide covers the essential components of a modern Kubernetes monitoring stack, focusing on Prometheus, Grafana, and Loki. It also addresses the concept of toil in Site Reliability Engineering (SRE) and provides detailed instructions for setting up and configuring Grafana dashboards.

## Table of Contents
- [Understanding Toil in SRE](#understanding-toil-in-sre)
- [Core Components of the Monitoring Stack](#core-components-of-the-monitoring-stack)
  - [Prometheus](#prometheus)
  - [Grafana](#grafana)
  - [Loki](#loki)
  - [Helm](#helm)
- [Setting Up the Monitoring Stack](#setting-up-the-monitoring-stack)
  - [Environment Preparation](#environment-preparation)
  - [Deploying Sample Application](#deploying-sample-application)
  - [Installing Prometheus](#installing-prometheus)
  - [Configuring and Deploying Loki](#configuring-and-deploying-loki)
  - [Setting Up Grafana](#setting-up-grafana)
- [Creating Grafana Dashboards](#creating-grafana-dashboards)
  - [Step 1: Access Grafana](#step-1-access-grafana)
  - [Step 2: Create a New Dashboard](#step-2-create-a-new-dashboard)
  - [Step 3: Configure Logs Panel](#step-3-configure-logs-panel)
  - [Step 4: Add a Filtered Error Logs Panel](#step-4-add-a-filtered-error-logs-panel)
  - [Step 5: Add a CPU Usage Panel](#step-5-add-a-cpu-usage-panel)
  - [Step 6: Add a Log Volume Panel](#step-6-add-a-log-volume-panel)
  - [Step 7: Arrange and Optimize Dashboard](#step-7-arrange-and-optimize-dashboard)
  - [Step 8: Configure Dashboard Settings](#step-8-configure-dashboard-settings)
  - [Step 9: Save and Share Your Dashboard](#step-9-save-and-share-your-dashboard)
- [Advanced Dashboard Techniques](#advanced-dashboard-techniques)
- [Troubleshooting](#troubleshooting)

## Understanding Toil in SRE

In Site Reliability Engineering (SRE), **toil** refers to operational work that has specific characteristics:

- Manual and repetitive tasks
- Automatable but not yet automated
- Provides no lasting service value
- Scales directly with service growth
- Takes time away from strategic engineering work

### Managing Toil Effectively

SRE teams handle toil through several approaches:

1. **Automate**: Transform manual work into automated processes
2. **Eliminate**: Address root causes to permanently remove sources of toil
3. **Reduce**: Optimize necessary manual processes
4. **Limit**: Keep toil under 50% of team capacity (Google's SRE best practice)

Effective monitoring is crucial for identifying and managing toil. The monitoring stack described in this guide helps teams track system health, identify issues, and automate responses to reduce toil.

## Core Components of the Monitoring Stack

### Prometheus

Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability:

- **Architecture**: Pull-based metric collection at configurable intervals
- **Storage**: Time-series database optimized for metrics
- **Capabilities**: Collects system metrics (CPU, memory, network) and application metrics
- **Features**:
  - Automated service discovery
  - Multi-dimensional data model
  - Powerful query language (PromQL)
  - Built-in alerting capabilities

### Grafana

Grafana is a visualization and analytics platform that transforms metrics into actionable insights:

- **Purpose**: Creates dynamic, real-time dashboards
- **Compatibility**: Works with multiple data sources (Prometheus, Loki, InfluxDB, etc.)
- **Key Features**:
  - Interactive dashboards
  - Extensive visualization options
  - Alert management
  - Team collaboration features

### Loki

Loki is a log aggregation system designed with a similar approach to Prometheus:

- **Design**: Indexes metadata rather than full log content
- **Efficiency**: More resource-efficient than traditional log systems
- **Integration**: Seamlessly connects logs with metrics for comprehensive debugging
- **Features**:
  - Label-based log querying
  - Grafana native support
  - Cost-effective storage

### Helm

Helm is the package manager for Kubernetes that simplifies deployments:

- **Purpose**: Streamlines Kubernetes application lifecycle management
- **Components**: Uses charts for templated application deployments
- **Benefits**:
  - Simplified application installation
  - Consistent deployment patterns
  - Easy updates and rollbacks
  - Managed configuration

## Setting Up the Monitoring Stack

### Environment Preparation

1. Start or reset Minikube:
   ```bash
   minikube delete  # Optional: reset existing cluster
   minikube start --driver=docker --cpus=2 --memory=3072
   ```

2. Verify Minikube status:
   ```bash
   minikube status
   ```

3. Check node availability:
   ```bash
   kubectl get nodes
   ```

4. Install Helm (if not already installed):
   ```bash
   curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
   chmod +x get_helm.sh
   ./get_helm.sh
   ```

### Deploying Sample Application

1. Create a sample application that generates various log types:
   ```bash
   # Create namespace
   kubectl create namespace sample-app
   
   # Deploy sample application
   kubectl apply -f sample-app.yaml
   ```

2. The application should generate different log types:
   - **[INFO]**: Regular operational messages
   - **[DEBUG]**: Detailed troubleshooting information
   - **[ERROR]**: Random error messages

### Installing Prometheus

1. Create a monitoring namespace:
   ```bash
   kubectl create namespace monitoring
   ```

2. Create a `values.yaml` file for Prometheus configuration

3. Install Prometheus using Helm:
   ```bash
   helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
   helm repo update
   
   helm install prometheus prometheus-community/prometheus \
     --namespace monitoring \
     --values values.yaml
   ```

4. Verify Prometheus is running:
   ```bash
   kubectl wait --for=condition=ready pod \
     --selector="app.kubernetes.io/name=prometheus,app.kubernetes.io/component=server" \
     -n monitoring --timeout=120s
   ```

### Configuring and Deploying Loki

1. Create a `values.yaml` file for Loki configuration, including:
   - Authentication credentials
   - Data source configurations
   - Dashboard provisioning settings

2. Install Loki using Helm:
   ```bash
   helm repo add grafana https://grafana.github.io/helm-charts
   helm repo update
   
   helm install loki grafana/loki-stack \
     --namespace monitoring \
     --values values.yaml
   ```

### Setting Up Grafana

1. Create a `values.yaml` file for Grafana configuration, including:
   - Admin credentials
   - Data source configurations
   - Dashboard providers

2. Install Grafana using Helm:
   ```bash
   helm install grafana grafana/grafana \
     --namespace monitoring \
     --values values.yaml
   ```

3. Expose Grafana service:
   ```bash
   kubectl port-forward svc/grafana -n monitoring 3000:80
   ```

## Creating Grafana Dashboards

### Step 1: Access Grafana

1. Ensure Grafana is running and accessible:
   ```bash
   kubectl port-forward svc/grafana -n monitoring 3000:80
   ```

2. Open your web browser and navigate to:
   ```
   http://localhost:3000
   ```

3. Log in with the credentials:
   - Username: admin
   - Password: admin (or the password specified in your values.yaml)

### Step 2: Create a New Dashboard

1. Click the "+" icon in the left sidebar
2. Select "Dashboard" from the dropdown menu
3. Click "Add a new panel"

### Step 3: Configure Logs Panel

1. In the panel editor, select "Loki" as your data source
2. Enter the following query:
   ```
   {namespace="sample-app"}
   ```
3. From the visualization options, select "Logs"
4. Configure the panel display options:
   - Set panel title to "Application Logs"
   - Under Options, enable "Show time"
   - Set "Sort order" to "Descending" (newest logs first)

5. Click "Apply" to add this panel to your dashboard

### Step 4: Add a Filtered Error Logs Panel

1. Click the "Add panel" button (+ icon) in the top menu
2. Select "Add a new panel"
3. Select "Loki" as your data source
4. Enter this query to show only error logs:
   ```
   {namespace="sample-app"} |= "ERROR"
   ```
5. Select "Logs" visualization
6. Configure the panel:
   - Set title to "Error Logs"
   - Enable "Show labels"
   - Set appropriate panel size by dragging its corners
   
7. Click "Apply" to add this panel

### Step 5: Add a CPU Usage Panel

1. Click "Add panel" again
2. Select "Prometheus" as your data source
3. Switch from builder to code mode
4. Enter the following PromQL query:
   ```promql
   sum(rate(container_cpu_usage_seconds_total{namespace="sample-app"}[5m])) by (pod)
   ```
5. Select "Time series" visualization
6. Configure the panel:
   - Set title to "CPU Usage by Pod"
   - Under "Legend" settings, enable "Show values"
   - In Field tab, set Unit to "Percent (0-100)"
   
7. Click "Apply" to add this panel

### Step 6: Add a Log Volume Panel

1. Click "Add panel" once more
2. Select "Loki" as your data source
3. Enter the following query:
   ```
   sum(count_over_time({namespace="sample-app"}[5m])) by (pod_name)
   ```
4. Select "Time series" visualization
5. Configure the panel:
   - Set title to "Log Volume by Pod"
   - Adjust visualization settings as needed
   
6. Click "Apply" to add this panel

### Step 7: Arrange and Optimize Dashboard

1. Drag panels to reposition them
2. Resize panels by dragging their corners
3. Create an intuitive layout with related metrics grouped together

### Step 8: Configure Dashboard Settings

1. Click the gear icon âš™ in the top-right to access dashboard settings
2. Under "General":
   - Name your dashboard "Kubernetes Application Monitoring"
   - Add a description if desired
   - Add tags like "kubernetes" and "application"
   
3. Under "Time options":
   - Set the default time range to "Last 15 minutes"
   - Set refresh rate to "5s" for real-time monitoring

4. Click "Save" to apply settings

### Step 9: Save and Share Your Dashboard

1. Click the save icon ðŸ’¾ in the top-right corner
2. Provide a meaningful name for your dashboard
3. Add a description (optional)
4. Set up the dashboard refresh interval (e.g., 5s for real-time updates)
5. Share the dashboard with your team as needed

## Advanced Dashboard Techniques

For more sophisticated dashboards, consider:

- **Template variables**: Make dashboards dynamic by allowing users to filter by namespace, pod, or other dimensions
- **Alert rules**: Set up notifications when metrics exceed thresholds
- **Annotations**: Mark significant events on time-series graphs
- **Dashboard organization**: Use rows to group related panels by category
- **Repeat panels**: Create panels that repeat for each instance of a variable

## Troubleshooting

Common issues and solutions:

1. **No data in Grafana panels**:
   - Verify Prometheus and Loki pods are running
   - Check data source configurations in Grafana
   - Ensure metrics are being collected from your application

2. **Incorrect metrics**:
   - Validate PromQL queries
   - Check namespace and label selectors
   - Verify time range selection

3. **Grafana access issues**:
   - Ensure port forwarding is active
   - Verify credentials
   - Check network connectivity

4. **Log parsing problems**:
   - Review Loki configuration
   - Check log format consistency
   - Verify label filters

5. **Dashboard performance**:
   - Optimize query time ranges
   - Limit the number of high-cardinality metrics
   - Consider using recording rules for complex queries